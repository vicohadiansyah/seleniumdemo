{
  "stats": {
    "suites": 3,
    "tests": 4,
    "passes": 3,
    "pending": 0,
    "failures": 1,
    "start": "2023-08-07T15:28:46.785Z",
    "end": "2023-08-07T15:28:51.282Z",
    "duration": 4497,
    "testsRegistered": 4,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d17eaa21-3118-4154-8fa2-d94a5c8f1811",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1765f897-f941-469b-a4c5-afdb175fc463",
          "title": "add todo tests",
          "fullFile": "C:\\Users\\Admin\\seleniumdemo\\test\\firsttest.js",
          "file": "\\test\\firsttest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "succses fully add on todo list",
              "fullTitle": "add todo tests succses fully add on todo list",
              "timedOut": null,
              "duration": 2651,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//lauch brwoser \n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //navigate url \n        await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n        // add a todo\n        await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Selenium Pratice\", Key.RETURN);\n        //assertion\n        let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function(value){\n            return value\n        });\n        //assert use chai should\n        todoText.should.equal(\"Selenium Pratice\")\n        //close browser\n        await driver.quit();",
              "err": {},
              "uuid": "ef3693a5-19b9-453e-8c56-578c73354437",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ef3693a5-19b9-453e-8c56-578c73354437"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2651,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "9d6a5300-8127-4cb8-bbbc-0eff785332d5",
          "title": "sauce demo",
          "fullFile": "C:\\Users\\Admin\\seleniumdemo\\test\\saucedemo.js",
          "file": "\\test\\saucedemo.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "sauce demo",
              "fullTitle": "sauce demo sauce demo",
              "timedOut": null,
              "duration": 3069,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//lauch brwoser \n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //navigate url \n        await driver.get(\"https://www.saucedemo.com/\")\n        const expectedTitle = 'Swag Labs';\n        const actualTitle = await driver.getTitle();\n        assert(actualTitle.includes(expectedTitle));\n    \n        //get value\n        const username = 'standard_user';\n        const password = 'secret_sauce';\n      \n        //login menggunakan value \n        await driver.findElement(By.id(\"user-name\")).sendKeys(username);\n        await driver.findElement(By.id(\"password\")).sendKeys(password);\n        await driver.findElement(By.id(\"login-button\")).click();\n        //assert url berhasil login\n        const currentUrl = await driver.getCurrentUrl();\n        assert.strictEqual(currentUrl, 'https://www.saucedemo.com/inventory.html');\n        // check out backpack\n        await driver.findElement(By.id(\"add-to-cart-sauce-labs-backpack\")).click()\n        await driver.findElement(By.xpath(\"(//a[@class='shopping_cart_link'])[1]\")).click()\n        await driver.findElement(By.id(\"checkout\")).click()\n        // value untuk isi form checkout\n        const firstname = 'vico';\n        const lastame = 'hadi';\n        const zipcode = '40284';\n        await driver.findElement(By.id(\"first-name\")).sendKeys(firstname);\n        await driver.findElement(By.id(\"last-name\")).sendKeys(lastame);\n        await driver.findElement(By.id(\"postal-code\")).sendKeys(zipcode);\n        await driver.findElement(By.id(\"continue\")).click();\n        // confirm harga backpack \n        const cartPriceElement = await driver.findElement(By.className('inventory_item_price'));\n        const cartPriceText = await cartPriceElement.getText();\n        const expectedPriceText = '$29.99';\n        assert.strictEqual(cartPriceText, expectedPriceText);\n        //melanjutkan checkout\n        await driver.findElement(By.id(\"finish\")).click()\n        const completeMessage = await driver.findElement(By.className('complete-header')).getText();\n        const expectedMessage = 'THANK YOU FOR YOUR ORDER!';\n        // Assersi pesan berhasil\n        assert.strictEqual(completeMessage.toUpperCase(), expectedMessage);\n        \n        //close browser\n        await driver.quit();",
              "err": {},
              "uuid": "c8ba38b1-e5df-4211-9404-2b4f2ba46fe0",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8ba38b1-e5df-4211-9404-2b4f2ba46fe0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3069,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "d4b439a3-ebd3-4def-a1d0-6867124ddfea",
          "title": "add anothet todo tests",
          "fullFile": "C:\\Users\\Admin\\seleniumdemo\\test\\secondtest.js",
          "file": "\\test\\secondtest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "succses fully add another on todo list",
              "fullTitle": "add anothet todo tests succses fully add another on todo list",
              "timedOut": null,
              "duration": 2680,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//lauch brwoser \n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //navigate url \n        await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n        // add a todo\n        await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Selenium Pratice\", Key.RETURN);\n        //assertion\n        let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function(value){\n            return value\n        });\n        //assert use chai should\n        todoText.should.equal(\"Selenium Pratice\")\n        //close browser\n        await driver.quit();",
              "err": {},
              "uuid": "89def2e4-2f6d-44bf-895c-4da28bd7a27e",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Add new test for report",
              "fullTitle": "add anothet todo tests Add new test for report",
              "timedOut": null,
              "duration": 1431,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "//lauch brwoser \n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        //navigate url \n        await driver.get(\"https://lambdatest.github.io/sample-todo-app/\")\n        // add a todo\n        await driver.findElement(By.id(\"sampletodotext\")).sendKeys(\"Selenium Pratice\", Key.RETURN);\n        //assertion\n        let todoText = await driver.findElement(By.xpath(\"//li[last()]\")).getText().then(function(value){\n            return value\n        });\n        //assert use chai should\n        todoText.should.equal(\"Selenium \")\n        //close browser\n        await driver.quit();",
              "err": {
                "message": "AssertionError: expected 'Selenium Pratice' to equal 'Selenium '",
                "estack": "AssertionError: expected 'Selenium Pratice' to equal 'Selenium '\n    at Context.<anonymous> (test\\secondtest.js:48:25)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- Selenium Pratice\n+ Selenium \n"
              },
              "uuid": "e7c5530c-e6c4-4b04-a61f-be5f12f98526",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "89def2e4-2f6d-44bf-895c-4da28bd7a27e"
          ],
          "failures": [
            "e7c5530c-e6c4-4b04-a61f-be5f12f98526"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4111,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "TestSelenium",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "TestReport",
        "reportFilename": "TestSelenium"
      },
      "version": "6.2.0"
    }
  }
}